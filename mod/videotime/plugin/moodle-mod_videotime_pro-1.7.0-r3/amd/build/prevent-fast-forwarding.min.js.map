{"version":3,"file":"prevent-fast-forwarding.min.js","sources":["../src/prevent-fast-forwarding.js"],"sourcesContent":["import VideoTimePlugin from \"mod_videotime/videotime-plugin\";\nimport Ajax from \"core/ajax\";\nimport Config from \"core/config\";\nimport Notification from \"core/notification\";\nimport Log from \"core/log\";\nimport { get_string as getString } from \"core/str\";\n\nexport default class PreventFastForwarding extends VideoTimePlugin {\n    /**\n     * Constructor\n     */\n    constructor() {\n        super(\"preventfastforwarding\");\n        this.watchTime = 0;\n        this.seeking = false;\n        this.duration = 0;\n        this.playbackRate = 1;\n        this.fastForwardBuffer = 2.5; // Seconds.\n        this.lastNotice = 0;\n    }\n\n    /**\n     * Initialize the videotime instance with prevent fast forwarding module\n     * @param {VideoTime} videotime\n     * @param {object} instance Prefetched VideoTime instance object.\n     */\n    initialize(videotime, instance) {\n        if (!Number(instance.preventfastforwarding)) {\n            // Prevent fast forwarding not enabled for this cm.\n            super.initialize(videotime);\n            return;\n        }\n\n        this.getWatchPercent(videotime.getCmId(), instance.token)\n            .then((percent) => {\n                videotime\n                    .getDuration()\n                    .then((duration) => {\n                        if (Number.isNaN(duration) || !duration) {\n                            videotime.getPlayer().on(\"play\", () => {\n                                videotime\n                                    .getDuration()\n                                    .then((duration) => {\n                                        this.duration = duration;\n                                        this.watchTime = percent * duration;\n                                        Log.debug(\n                                            \"PREVENT FF: watch time \" + this.watchTime\n                                        );\n                                    })\n                                    .catch(Notification.exception);\n                            });\n                        } else {\n                            this.duration = duration;\n                            this.watchTime = percent * duration;\n                            Log.debug(\n                                \"PREVENT FF: watch time \" + this.watchTime\n                            );\n                        }\n                    })\n                    .catch(Notification.exception);\n            })\n            .catch(Notification.exception);\n\n        // Keep track of playback rate.\n        videotime.getPlaybackRate().then((playbackRate) => {\n            this.playbackRate = playbackRate;\n        });\n        videotime.getPlayer().on(\"playbackrateschange\", (data) => {\n            this.playbackRate = data.playbackRate;\n        });\n        videotime.getPlayer().on(\"playbackratechange\", (data) => {\n            this.playbackRate = data.playbackRate;\n        });\n\n        videotime.getPlayer().on(\"timeupdate\", () => {\n            setTimeout(() => {\n                videotime.getCurrentPosition().then((seconds) => {\n                    if (\n                        this.duration &&\n                        seconds > this.watchTime + this.fastForwardBuffer * this.playbackRate\n                    ) {\n                        // Seeked too far forward.\n                        Log.debug(\"PREVENT FF: Preventing...\");\n                        videotime.setCurrentPosition(this.watchTime);\n                        if (Date.now() > this.lastNotice + 5000) {\n                            this.lastNotice = Date.now();\n                            getString(\n                                \"preventfastforwardingmessage\",\n                                \"mod_videotime\",\n                                {\n                                    percent: Math.round(\n                                        (this.watchTime * 100) / this.duration\n                                    ),\n                                }\n                            )\n                                .then(this.message)\n                                .fail(Notification.exception);\n                        }\n                    } else if (seconds > this.watchTime) {\n                        this.watchTime = seconds;\n                        Log.debug(\"PREVENT FF: setting watch time \" + seconds);\n                    }\n                });\n            });\n        });\n\n        super.initialize(videotime);\n    }\n\n    /**\n     * Send notification to user interface\n     *\n     * @param {string} message message to send\n     */\n    message(message) {\n        Notification.addNotification({\n            message: message,\n            type: \"info\",\n        });\n    }\n\n    /**\n     * Get how far (in percent 0.0 - 1.0) someone has watched a video.\n     *\n     * @param {int} cmId\n     * @param {string} token Mobile service token\n     * @returns {Promise}\n     */\n    getWatchPercent(cmId, token) {\n        if (token) {\n            const url = new URL(Config.wwwroot + '/webservice/rest/server.php'),\n                data = url.searchParams;\n            data.set('wstoken', token);\n            data.set('moodlewsrestformat', 'json');\n            data.set('wsfunction', 'videotimeplugin_pro_get_watch_percent');\n            data.set('cmid', cmId);\n            return fetch(url).then((response) => {\n                if (!response.ok)  {\n                    Notification.exeption('Web service error');\n                }\n                return response.json();\n            });\n        }\n\n        return Ajax.call([{\n            methodname: \"videotimeplugin_pro_get_watch_percent\",\n            args: { cmid: cmId },\n        }])[0];\n    }\n}\n"],"names":["PreventFastForwarding","VideoTimePlugin","constructor","watchTime","seeking","duration","playbackRate","fastForwardBuffer","lastNotice","initialize","videotime","instance","Number","preventfastforwarding","getWatchPercent","getCmId","token","then","percent","getDuration","isNaN","getPlayer","on","debug","this","catch","Notification","exception","getPlaybackRate","data","setTimeout","getCurrentPosition","seconds","setCurrentPosition","Date","now","Math","round","message","fail","addNotification","type","cmId","url","URL","Config","wwwroot","searchParams","set","fetch","response","ok","exeption","json","Ajax","call","methodname","args","cmid"],"mappings":"qnBAOqBA,8BAA8BC,yBAI/CC,oBACU,8BACDC,UAAY,OACZC,SAAU,OACVC,SAAW,OACXC,aAAe,OACfC,kBAAoB,SACpBC,WAAa,EAQtBC,WAAWC,UAAWC,UACbC,OAAOD,SAASE,6BAMhBC,gBAAgBJ,UAAUK,UAAWJ,SAASK,OAC9CC,MAAMC,UACHR,UACKS,cACAF,MAAMZ,WACCO,OAAOQ,MAAMf,YAAcA,SAC3BK,UAAUW,YAAYC,GAAG,QAAQ,KAC7BZ,UACKS,cACAF,MAAMZ,gBACEA,SAAWA,cACXF,UAAYe,QAAUb,sBACvBkB,MACA,0BAA4BC,KAAKrB,cAGxCsB,MAAMC,sBAAaC,oBAGvBtB,SAAWA,cACXF,UAAYe,QAAUb,sBACvBkB,MACA,0BAA4BC,KAAKrB,eAI5CsB,MAAMC,sBAAaC,cAE3BF,MAAMC,sBAAaC,WAGxBjB,UAAUkB,kBAAkBX,MAAMX,oBACzBA,aAAeA,gBAExBI,UAAUW,YAAYC,GAAG,uBAAwBO,YACxCvB,aAAeuB,KAAKvB,gBAE7BI,UAAUW,YAAYC,GAAG,sBAAuBO,YACvCvB,aAAeuB,KAAKvB,gBAG7BI,UAAUW,YAAYC,GAAG,cAAc,KACnCQ,YAAW,KACPpB,UAAUqB,qBAAqBd,MAAMe,UAE7BR,KAAKnB,UACL2B,QAAUR,KAAKrB,UAAYqB,KAAKjB,kBAAoBiB,KAAKlB,2BAGrDiB,MAAM,6BACVb,UAAUuB,mBAAmBT,KAAKrB,WAC9B+B,KAAKC,MAAQX,KAAKhB,WAAa,WAC1BA,WAAa0B,KAAKC,0BAEnB,+BACA,gBACA,CACIjB,QAASkB,KAAKC,MACQ,IAAjBb,KAAKrB,UAAmBqB,KAAKnB,YAIrCY,KAAKO,KAAKc,SACVC,KAAKb,sBAAaC,aAEpBK,QAAUR,KAAKrB,iBACjBA,UAAY6B,qBACbT,MAAM,kCAAoCS,yBAMxDvB,WAAWC,kBA7EPD,WAAWC,WAqFzB4B,QAAQA,+BACSE,gBAAgB,CACzBF,QAASA,QACTG,KAAM,SAWd3B,gBAAgB4B,KAAM1B,UACdA,MAAO,OACD2B,IAAM,IAAIC,IAAIC,gBAAOC,QAAU,+BACjCjB,KAAOc,IAAII,oBACflB,KAAKmB,IAAI,UAAWhC,OACpBa,KAAKmB,IAAI,qBAAsB,QAC/BnB,KAAKmB,IAAI,aAAc,yCACvBnB,KAAKmB,IAAI,OAAQN,MACVO,MAAMN,KAAK1B,MAAMiC,WACfA,SAASC,0BACGC,SAAS,qBAEnBF,SAASG,iBAIjBC,cAAKC,KAAK,CAAC,CACdC,WAAY,wCACZC,KAAM,CAAEC,KAAMhB,SACd"}